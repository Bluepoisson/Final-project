{
  "{\"sourceRoot\":\"/Users/Nadia/Technigo/Final-project/server/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Nadia/Technigo/Final-project/server\",\"filename\":\"/Users/Nadia/Technigo/Final-project/server/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Nadia/Technigo/Final-project/server\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Nadia/Technigo/Final-project/server",
      "filename": "/Users/Nadia/Technigo/Final-project/server/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Nadia/Technigo/Final-project/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Nadia/Technigo/Final-project/server/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/Nadia/Technigo/Final-project/server/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\ndotenv.config();\nconsole.log(\"Our hero is:\" + process.env.HERO);\nconst mongoUrl = process.env.MONGO_URL || 'mongodb://localhost/finalProject';\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nmongoose.Promise = Promise;\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minLength: 5\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex'),\n    unique: true\n  }\n});\nuserSchema.pre('save', async function (next) {\n  const user = this;\n\n  if (!user.isModified('password')) {\n    return next();\n  }\n\n  if (process.env.RESET_DATABASE) {\n    console.log('Resetting database!');\n\n    const seedDatabase = async () => {\n      await User.deleteMany();\n      await Review.deleteMany();\n    };\n\n    seedDatabase();\n  }\n\n  const salt = bcrypt.genSaltSync();\n  console.log(`PRE- password before hash: ${user.password}`);\n  user.password = bcrypt.hashSync(user.password, salt);\n  console.log(`PRE- password after  hash: ${user.password}`); // Continue with the save\n\n  next();\n});\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const accessToken = req.header('Authorization');\n    const user = await User.findOne({\n      accessToken\n    });\n\n    if (!user) {\n      throw 'User not found';\n    }\n\n    req.user = user;\n    next();\n  } catch (err) {\n    const errorMessage = 'Please try logging in again';\n    console.log(errorMessage);\n    res.status(401).json({\n      error: errorMessage\n    });\n  }\n}; //! google review details?\n\n\nconst Review = mongoose.model('Review', {\n  author: {\n    type: String,\n    unique: true,\n    minLength: 3,\n    maxLength: 20\n  },\n  text: {\n    type: String,\n    required: true,\n    minlength: [5, \"Review must be at least 5 characters\"],\n    maxlength: [200, \"Review must be at most 200 characters\"]\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model('User', userSchema); //   PORT=9000 npm start\n\nconst port = process.env.PORT || 8080;\nconst app = express();\n\nconst listEndpoints = require('express-list-endpoints');\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use((req, res, next) => {\n  if (mongoose.connection.readyState === 1) {\n    next();\n  } else {\n    res.status(503).json({\n      error: 'Service Unavailable'\n    });\n  }\n});\napp.get('/', (req, res) => {\n  res.send(listEndpoints(app));\n}); // Sign-up\n\napp.post('/users', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await new User({\n      email,\n      password\n    }).save();\n    res.status(200).json({\n      userId: user._id,\n      accessToken: user.accessToken\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Could not create user',\n      errors: err\n    });\n  }\n}); // Login\n\napp.post('/sessions', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    });\n\n    if (user && bcrypt.compareSync(password, user.password)) {\n      res.status(200).json({\n        userId: user._id,\n        accessToken: user.accessToken\n      });\n    } else {\n      throw 'User not found';\n    }\n  } catch (err) {\n    res.status(404).json({\n      error: 'User not found'\n    });\n  }\n});\napp.get('/secret', authenticateUser); // Allow one specific domain for one specific endpoint\n\napp.get('/secret', cors({\n  origin: 'localhost:3000'\n}), async (req, res) => {\n  console.log(`User from authenticateUser: ${req.user}`);\n  const secretMessage = `We can modify this secret message for ${req.user.email}`;\n  res.status(200).json({\n    secretMessage\n  });\n}); // Get user specific information\n\napp.get('/users/:id/profile', authenticateUser);\napp.get('/users/:id/profile', async (req, res) => {\n  const user = await User.findOne({\n    _id: req.params.id\n  });\n  const publicProfileMessage = `This is a public profile message for ${user.email}`;\n  const privateProfileMessage = `This is a private profile message for ${user.email}`;\n  console.log(`Authenticated req.user._id: '${req.user._id.$oid}'`);\n  console.log(`Requested     user._id    : '${user._id}'`);\n  console.log(`Equal   : ${req.user_id == user._id}`); // Decide private or public here\n\n  if (req.user._id.$oid === user._id.$oid) {\n    // Private\n    res.status(200).json({\n      profileMessage: privateProfileMessage\n    });\n  } else {\n    // Public information or Forbidden (403) because the users don't match\n    res.status(200).json({\n      profileMessage: publicProfileMessage\n    });\n  }\n});\napp.get('/reviews', async (req, res) => {\n  try {\n    const reviews = await Review.find().sort({\n      createdAt: 'desc'\n    }).limit(20).exec();\n    res.status(200).json(reviews);\n  } catch (err) {\n    res.status(404).json({\n      message: 'Page not found',\n      error: err.errors\n    });\n  }\n});\napp.post('/reviews', async (req, res) => {\n  const {\n    message,\n    email\n  } = req.body;\n  const review = new Review({\n    message,\n    email\n  });\n\n  try {\n    const savedReview = await review.save();\n    res.status(200).json(savedReview);\n  } catch (err) {\n    res.status(400).json({\n      message: 'Bad request. Could not save review to the database',\n      error: err.errors\n    });\n  }\n}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "cors",
        "mongoose",
        "crypto",
        "bcrypt",
        "dotenv",
        "config",
        "console",
        "log",
        "process",
        "env",
        "HERO",
        "mongoUrl",
        "MONGO_URL",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "Promise",
        "userSchema",
        "Schema",
        "email",
        "type",
        "String",
        "unique",
        "required",
        "password",
        "minLength",
        "accessToken",
        "default",
        "randomBytes",
        "toString",
        "pre",
        "next",
        "user",
        "isModified",
        "RESET_DATABASE",
        "seedDatabase",
        "User",
        "deleteMany",
        "Review",
        "salt",
        "genSaltSync",
        "hashSync",
        "authenticateUser",
        "req",
        "res",
        "header",
        "findOne",
        "err",
        "errorMessage",
        "status",
        "json",
        "error",
        "model",
        "author",
        "maxLength",
        "text",
        "minlength",
        "maxlength",
        "createdAt",
        "Date",
        "now",
        "port",
        "PORT",
        "app",
        "listEndpoints",
        "require",
        "use",
        "connection",
        "readyState",
        "get",
        "send",
        "post",
        "body",
        "save",
        "userId",
        "_id",
        "message",
        "errors",
        "compareSync",
        "origin",
        "secretMessage",
        "params",
        "id",
        "publicProfileMessage",
        "privateProfileMessage",
        "$oid",
        "user_id",
        "profileMessage",
        "reviews",
        "find",
        "sort",
        "limit",
        "exec",
        "review",
        "savedReview",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\n\ndotenv.config();\nconsole.log(\"Our hero is:\" + process.env.HERO);\n\nconst mongoUrl = process.env.MONGO_URL || 'mongodb://localhost/finalProject';\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\nmongoose.Promise = Promise;\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minLength: 5,\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex'),\n    unique: true,\n  },\n});\n\nuserSchema.pre('save', async function (next) {\n  const user = this;\n\n  if (!user.isModified('password')) {\n    return next();\n  }\n\n\nif (process.env.RESET_DATABASE) {\n    console.log('Resetting database!');\n    const seedDatabase = async () => {\n    \n    await User.deleteMany();\n    await Review.deleteMany();\n    \n\n    }\n    seedDatabase();\n  }\n\n  const salt = bcrypt.genSaltSync();\n  console.log(`PRE- password before hash: ${user.password}`);\n  user.password = bcrypt.hashSync(user.password, salt);\n  console.log(`PRE- password after  hash: ${user.password}`);\n\n  // Continue with the save\n  next();\n});\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const accessToken = req.header('Authorization');\n    const user = await User.findOne({ accessToken });\n    if (!user) {\n      throw 'User not found';\n    }\n    req.user = user;\n    next();\n  } catch (err) {\n    const errorMessage = 'Please try logging in again';\n    console.log(errorMessage);\n    res.status(401).json({ error: errorMessage });\n  }\n};\n\n//! google review details?\n\nconst Review =  mongoose.model('Review', {\n    author: { \n        type: String,\n        unique: true,\n        minLength: 3,\n        maxLength: 20\n    },\n    text: {\n        type: String,\n        required: true,\n        minlength: [5, \"Review must be at least 5 characters\"],\n        maxlength:  [200, \"Review must be at most 200 characters\"],\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    },\n});\n\n\nconst User = mongoose.model('User', userSchema);\n\n\n//   PORT=9000 npm start\nconst port = process.env.PORT || 8080;\nconst app = express();\n\nconst listEndpoints = require('express-list-endpoints')\n\napp.use(cors())\napp.use(bodyParser.json())\n\napp.use((req, res, next) => {\n  if (mongoose.connection.readyState === 1) {\n    next()\n  } else {\n    res.status(503).json({ error: 'Service Unavailable' })\n  }\n})\n\napp.get('/', (req, res) => {\n    res.send(listEndpoints(app))\n  })\n\n// Sign-up\napp.post('/users', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await new User({\n      email,\n      password,\n    }).save();\n    res.status(200).json({ userId: user._id, accessToken: user.accessToken });\n  } catch (err) {\n    res.status(400).json({ message: 'Could not create user', errors: err });\n  }\n});\n\n// Login\napp.post('/sessions', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await User.findOne({ email });\n    if (user && bcrypt.compareSync(password, user.password)) {\n      res.status(200).json({ userId: user._id, accessToken: user.accessToken });\n    } else {\n      throw 'User not found';\n    }\n  } catch (err) {\n    res.status(404).json({ error: 'User not found' });\n  }\n});\n\napp.get('/secret', authenticateUser);\n// Allow one specific domain for one specific endpoint\napp.get('/secret', cors({ origin: 'localhost:3000' }), async (req, res) => {\n  console.log(`User from authenticateUser: ${req.user}`);\n  const secretMessage = `We can modify this secret message for ${req.user.email}`;\n  res.status(200).json({ secretMessage });\n});\n\n\n// Get user specific information\napp.get('/users/:id/profile', authenticateUser);\napp.get('/users/:id/profile', async (req, res) => {\n  const user = await User.findOne({ _id: req.params.id });\n  const publicProfileMessage = `This is a public profile message for ${user.email}`;\n  const privateProfileMessage = `This is a private profile message for ${user.email}`;\n\n  console.log(`Authenticated req.user._id: '${req.user._id.$oid}'`);\n  console.log(`Requested     user._id    : '${user._id}'`);\n  console.log(`Equal   : ${req.user_id == user._id}`);\n\n  // Decide private or public here\n  if (req.user._id.$oid === user._id.$oid) {\n    // Private\n    res.status(200).json({ profileMessage: privateProfileMessage });\n  } else {\n    // Public information or Forbidden (403) because the users don't match\n    res.status(200).json({ profileMessage: publicProfileMessage });\n  }\n});\n\n\napp.get('/reviews', async (req, res) => {\n    try {\n    const reviews = await Review.find()\n        .sort({createdAt: 'desc'})\n        .limit(20)\n        .exec(); \n        res.status(200).json(reviews);\n    } catch (err) {\n      res.status(404).json({ message: 'Page not found', error: err.errors })\n    }\n  });\n  \n  app.post('/reviews', async (req, res) => {\n    const { message, email } = req.body;\n    const review = new Review({ message, email });\n  \n    try {\n      const savedReview = await review.save();\n      res.status(200).json(savedReview);\n    } catch (err) {\n      res.status(400).json({ message: 'Bad request. Could not save review to the database', error: err.errors });\n    }\n  });\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1612293514195
  },
  "{\"sourceRoot\":\"/Users/Nadia/Technigo/Final-project/server/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Nadia/Technigo/Final-project/server\",\"filename\":\"/Users/Nadia/Technigo/Final-project/server/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Nadia/Technigo/Final-project/server\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Nadia/Technigo/Final-project/server",
      "filename": "/Users/Nadia/Technigo/Final-project/server/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Nadia/Technigo/Final-project/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Nadia/Technigo/Final-project/server/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/Nadia/Technigo/Final-project/server/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\ndotenv.config();\nconsole.log(\"Our hero is:\" + process.env.HERO);\nconst mongoUrl = process.env.MONGO_URL || 'mongodb://localhost/finalProject';\nmongoose.connect(mongoUrl, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nmongoose.Promise = Promise;\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minLength: 5\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex'),\n    unique: true\n  }\n});\nuserSchema.pre('save', async function (next) {\n  const user = this;\n\n  if (!user.isModified('password')) {\n    return next();\n  }\n\n  if (process.env.RESET_DATABASE) {\n    console.log('Resetting database!');\n\n    const seedDatabase = async () => {\n      await User.deleteMany();\n      await Review.deleteMany();\n    };\n\n    seedDatabase();\n  }\n\n  const salt = bcrypt.genSaltSync();\n  console.log(`PRE- password before hash: ${user.password}`);\n  user.password = bcrypt.hashSync(user.password, salt);\n  console.log(`PRE- password after  hash: ${user.password}`); // Continue with the save\n\n  next();\n});\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const accessToken = req.header('Authorization');\n    const user = await User.findOne({\n      accessToken\n    });\n\n    if (!user) {\n      throw 'User not found';\n    }\n\n    req.user = user;\n    next();\n  } catch (err) {\n    const errorMessage = 'Please try logging in again';\n    console.log(errorMessage);\n    res.status(401).json({\n      error: errorMessage\n    });\n  }\n}; //! google review details?\n\n\nconst Review = mongoose.model('Review', {\n  author: {\n    type: String,\n    unique: true,\n    minLength: 3,\n    maxLength: 20\n  },\n  text: {\n    type: String,\n    required: true,\n    minlength: [5, \"Review must be at least 5 characters\"],\n    maxlength: [200, \"Review must be at most 200 characters\"]\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model('User', userSchema); //   PORT=9000 npm start\n\nconst port = process.env.PORT || 8080;\nconst app = express();\n\nconst listEndpoints = require('express-list-endpoints');\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use((req, res, next) => {\n  if (mongoose.connection.readyState === 1) {\n    next();\n  } else {\n    res.status(503).json({\n      error: 'Service Unavailable'\n    });\n  }\n});\napp.get('/', (req, res) => {\n  res.send(listEndpoints(app));\n}); // Sign-up\n\napp.post('/users', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await new User({\n      email,\n      password\n    }).save();\n    res.status(200).json({\n      userId: user._id,\n      accessToken: user.accessToken\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Could not create user',\n      errors: err\n    });\n  }\n}); // Login\n\napp.post('/sessions', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    });\n\n    if (user && bcrypt.compareSync(password, user.password)) {\n      res.status(200).json({\n        userId: user._id,\n        accessToken: user.accessToken\n      });\n    } else {\n      throw 'User not found';\n    }\n  } catch (err) {\n    res.status(404).json({\n      error: 'User not found'\n    });\n  }\n});\napp.get('/secret', authenticateUser); // Allow one specific domain for one specific endpoint\n\napp.get('/secret', cors({\n  origin: 'localhost:3000'\n}), async (req, res) => {\n  console.log(`User from authenticateUser: ${req.user}`);\n  const secretMessage = `We can modify this secret message for ${req.user.email}`;\n  res.status(200).json({\n    secretMessage\n  });\n}); // Get user specific information\n\napp.get('/users/:id/profile', authenticateUser);\napp.get('/users/:id/profile', async (req, res) => {\n  const user = await User.findOne({\n    _id: req.params.id\n  });\n  const publicProfileMessage = `This is a public profile message for ${user.email}`;\n  const privateProfileMessage = `This is a private profile message for ${user.email}`;\n  console.log(`Authenticated req.user._id: '${req.user._id.$oid}'`);\n  console.log(`Requested     user._id    : '${user._id}'`);\n  console.log(`Equal   : ${req.user_id == user._id}`); // Decide private or public here\n\n  if (req.user._id.$oid === user._id.$oid) {\n    // Private\n    res.status(200).json({\n      profileMessage: privateProfileMessage\n    });\n  } else {\n    // Public information or Forbidden (403) because the users don't match\n    res.status(200).json({\n      profileMessage: publicProfileMessage\n    });\n  }\n});\napp.get('/reviews', async (req, res) => {\n  try {\n    const reviews = await Review.find().sort({\n      createdAt: 'desc'\n    }).limit(20).exec();\n    res.status(200).json(reviews);\n  } catch (err) {\n    res.status(404).json({\n      message: 'Page not found',\n      error: err.errors\n    });\n  }\n});\napp.post('/reviews', async (req, res) => {\n  const {\n    message,\n    email\n  } = req.body;\n  const review = new Review({\n    message,\n    email\n  });\n\n  try {\n    const savedReview = await review.save();\n    res.status(200).json(savedReview);\n  } catch (err) {\n    res.status(400).json({\n      message: 'Bad request. Could not save review to the database',\n      error: err.errors\n    });\n  }\n}); // Start the server\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "bodyParser",
        "cors",
        "mongoose",
        "crypto",
        "bcrypt",
        "dotenv",
        "config",
        "console",
        "log",
        "process",
        "env",
        "HERO",
        "mongoUrl",
        "MONGO_URL",
        "connect",
        "useNewUrlParser",
        "useUnifiedTopology",
        "Promise",
        "userSchema",
        "Schema",
        "email",
        "type",
        "String",
        "unique",
        "required",
        "password",
        "minLength",
        "accessToken",
        "default",
        "randomBytes",
        "toString",
        "pre",
        "next",
        "user",
        "isModified",
        "RESET_DATABASE",
        "seedDatabase",
        "User",
        "deleteMany",
        "Review",
        "salt",
        "genSaltSync",
        "hashSync",
        "authenticateUser",
        "req",
        "res",
        "header",
        "findOne",
        "err",
        "errorMessage",
        "status",
        "json",
        "error",
        "model",
        "author",
        "maxLength",
        "text",
        "minlength",
        "maxlength",
        "createdAt",
        "Date",
        "now",
        "port",
        "PORT",
        "app",
        "listEndpoints",
        "require",
        "use",
        "connection",
        "readyState",
        "get",
        "send",
        "post",
        "body",
        "save",
        "userId",
        "_id",
        "message",
        "errors",
        "compareSync",
        "origin",
        "secretMessage",
        "params",
        "id",
        "publicProfileMessage",
        "privateProfileMessage",
        "$oid",
        "user_id",
        "profileMessage",
        "reviews",
        "find",
        "sort",
        "limit",
        "exec",
        "review",
        "savedReview",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\n\ndotenv.config();\nconsole.log(\"Our hero is:\" + process.env.HERO);\n\nconst mongoUrl = process.env.MONGO_URL || 'mongodb://localhost/finalProject';\nmongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\nmongoose.Promise = Promise;\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minLength: 5,\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex'),\n    unique: true,\n  },\n});\n\nuserSchema.pre('save', async function (next) {\n  const user = this;\n\n  if (!user.isModified('password')) {\n    return next();\n  }\n\n\nif (process.env.RESET_DATABASE) {\n    console.log('Resetting database!');\n    const seedDatabase = async () => {\n    \n    await User.deleteMany();\n    await Review.deleteMany();\n    \n\n    }\n    seedDatabase();\n  }\n\n  const salt = bcrypt.genSaltSync();\n  console.log(`PRE- password before hash: ${user.password}`);\n  user.password = bcrypt.hashSync(user.password, salt);\n  console.log(`PRE- password after  hash: ${user.password}`);\n\n  // Continue with the save\n  next();\n});\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const accessToken = req.header('Authorization');\n    const user = await User.findOne({ accessToken });\n    if (!user) {\n      throw 'User not found';\n    }\n    req.user = user;\n    next();\n  } catch (err) {\n    const errorMessage = 'Please try logging in again';\n    console.log(errorMessage);\n    res.status(401).json({ error: errorMessage });\n  }\n};\n\n//! google review details?\n\nconst Review =  mongoose.model('Review', {\n    author: { \n        type: String,\n        unique: true,\n        minLength: 3,\n        maxLength: 20\n    },\n    text: {\n        type: String,\n        required: true,\n        minlength: [5, \"Review must be at least 5 characters\"],\n        maxlength:  [200, \"Review must be at most 200 characters\"],\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    },\n});\n\n\nconst User = mongoose.model('User', userSchema);\n\n\n//   PORT=9000 npm start\nconst port = process.env.PORT || 8080;\nconst app = express();\n\nconst listEndpoints = require('express-list-endpoints')\n\napp.use(cors())\napp.use(bodyParser.json())\n\napp.use((req, res, next) => {\n  if (mongoose.connection.readyState === 1) {\n    next()\n  } else {\n    res.status(503).json({ error: 'Service Unavailable' })\n  }\n})\n\napp.get('/', (req, res) => {\n    res.send(listEndpoints(app))\n  })\n\n// Sign-up\napp.post('/users', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await new User({\n      email,\n      password,\n    }).save();\n    res.status(200).json({ userId: user._id, accessToken: user.accessToken });\n  } catch (err) {\n    res.status(400).json({ message: 'Could not create user', errors: err });\n  }\n});\n\n// Login\napp.post('/sessions', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await User.findOne({ email });\n    if (user && bcrypt.compareSync(password, user.password)) {\n      res.status(200).json({ userId: user._id, accessToken: user.accessToken });\n    } else {\n      throw 'User not found';\n    }\n  } catch (err) {\n    res.status(404).json({ error: 'User not found' });\n  }\n});\n\napp.get('/secret', authenticateUser);\n// Allow one specific domain for one specific endpoint\napp.get('/secret', cors({ origin: 'localhost:3000' }), async (req, res) => {\n  console.log(`User from authenticateUser: ${req.user}`);\n  const secretMessage = `We can modify this secret message for ${req.user.email}`;\n  res.status(200).json({ secretMessage });\n});\n\n\n// Get user specific information\napp.get('/users/:id/profile', authenticateUser);\napp.get('/users/:id/profile', async (req, res) => {\n  const user = await User.findOne({ _id: req.params.id });\n  const publicProfileMessage = `This is a public profile message for ${user.email}`;\n  const privateProfileMessage = `This is a private profile message for ${user.email}`;\n\n  console.log(`Authenticated req.user._id: '${req.user._id.$oid}'`);\n  console.log(`Requested     user._id    : '${user._id}'`);\n  console.log(`Equal   : ${req.user_id == user._id}`);\n\n  // Decide private or public here\n  if (req.user._id.$oid === user._id.$oid) {\n    // Private\n    res.status(200).json({ profileMessage: privateProfileMessage });\n  } else {\n    // Public information or Forbidden (403) because the users don't match\n    res.status(200).json({ profileMessage: publicProfileMessage });\n  }\n});\n\n\napp.get('/reviews', async (req, res) => {\n    try {\n    const reviews = await Review.find()\n        .sort({createdAt: 'desc'})\n        .limit(20)\n        .exec(); \n        res.status(200).json(reviews);\n    } catch (err) {\n      res.status(404).json({ message: 'Page not found', error: err.errors })\n    }\n  });\n  \n  app.post('/reviews', async (req, res) => {\n    const { message, email } = req.body;\n    const review = new Review({ message, email });\n  \n    try {\n      const savedReview = await review.save();\n      res.status(200).json(savedReview);\n    } catch (err) {\n      res.status(400).json({ message: 'Bad request. Could not save review to the database', error: err.errors });\n    }\n  });\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1612293514195
  },
  "{\"sourceRoot\":\"/Users/Nadia/Technigo/Final-project/server/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/Nadia/Technigo/Final-project/server\",\"filename\":\"/Users/Nadia/Technigo/Final-project/server/schemas.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/Nadia/Technigo/Final-project/server\",\"plugins\":[],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/Nadia/Technigo/Final-project/server",
      "filename": "/Users/Nadia/Technigo/Final-project/server/schemas.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/Nadia/Technigo/Final-project/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/Nadia/Technigo/Final-project/server/schemas.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/Nadia/Technigo/Final-project/server/schemas.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
        "sourceFileName": "schemas.js"
      }
    },
    "ast": null,
    "code": "import mongoose from 'mongoose';\n\nconst Schemas = () => {\n  const userSchema = new mongoose.Schema({\n    email: {\n      type: String,\n      unique: true,\n      required: true\n    },\n    password: {\n      type: String,\n      required: true,\n      minLength: 2\n    },\n    accessToken: {\n      type: String,\n      default: () => crypto.randomBytes(128).toString('hex'),\n      unique: true\n    }\n  }); // // user validation\n  // userSchema.pre('save', async function (next) {\n  // \tconst user = this;\n  // \tif (!user.isModified('password')) {\n  // \t\treturn next();\n  // \t}\n  //   const salt = bcrypt.genSaltSync();\n  // \tuser.password = bcrypt.hashSync(user.password, salt);\n  // \tnext();\n  // });\n\n  const clinicSchema = new mongoose.Schema({\n    formatted_address: {\n      type: String\n    },\n    formatted_phone_number: {\n      type: Number\n    },\n    name: {\n      type: String,\n      unique: true\n    },\n    opening_hours: {\n      type: Array\n    },\n    rating: {\n      type: Number\n    }\n  });\n  const reviewSchema = new mongoose.Schema({\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      required: true\n    },\n    clinic: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Clinic',\n      required: true\n    },\n    reception: {\n      type: Array\n    },\n    timely: {\n      type: Array\n    },\n    helpful: {\n      type: Array\n    },\n    recommendation: {\n      type: Array\n    },\n    testimonial: {\n      type: String,\n      maxLength: 200\n    },\n    createdAt: {\n      type: Date,\n      default: Date.now\n    }\n  });\n};\n\nexport default Schemas;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVtYXMuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJTY2hlbWFzIiwidXNlclNjaGVtYSIsIlNjaGVtYSIsImVtYWlsIiwidHlwZSIsIlN0cmluZyIsInVuaXF1ZSIsInJlcXVpcmVkIiwicGFzc3dvcmQiLCJtaW5MZW5ndGgiLCJhY2Nlc3NUb2tlbiIsImRlZmF1bHQiLCJjcnlwdG8iLCJyYW5kb21CeXRlcyIsInRvU3RyaW5nIiwiY2xpbmljU2NoZW1hIiwiZm9ybWF0dGVkX2FkZHJlc3MiLCJmb3JtYXR0ZWRfcGhvbmVfbnVtYmVyIiwiTnVtYmVyIiwibmFtZSIsIm9wZW5pbmdfaG91cnMiLCJBcnJheSIsInJhdGluZyIsInJldmlld1NjaGVtYSIsInVzZXIiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiY2xpbmljIiwicmVjZXB0aW9uIiwidGltZWx5IiwiaGVscGZ1bCIsInJlY29tbWVuZGF0aW9uIiwidGVzdGltb25pYWwiLCJtYXhMZW5ndGgiLCJjcmVhdGVkQXQiLCJEYXRlIiwibm93Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxRQUFQLE1BQXFCLFVBQXJCOztBQUVBLE1BQU1DLE9BQU8sR0FBRyxNQUFNO0FBQ3RCLFFBQU1DLFVBQVUsR0FBRyxJQUFJRixRQUFRLENBQUNHLE1BQWIsQ0FBb0I7QUFDckNDLElBQUFBLEtBQUssRUFBRTtBQUNMQyxNQUFBQSxJQUFJLEVBQUVDLE1BREQ7QUFFTEMsTUFBQUEsTUFBTSxFQUFFLElBRkg7QUFHTEMsTUFBQUEsUUFBUSxFQUFFO0FBSEwsS0FEOEI7QUFNckNDLElBQUFBLFFBQVEsRUFBRTtBQUNSSixNQUFBQSxJQUFJLEVBQUVDLE1BREU7QUFFUkUsTUFBQUEsUUFBUSxFQUFFLElBRkY7QUFHUkUsTUFBQUEsU0FBUyxFQUFFO0FBSEgsS0FOMkI7QUFXckNDLElBQUFBLFdBQVcsRUFBRTtBQUNYTixNQUFBQSxJQUFJLEVBQUVDLE1BREs7QUFFWE0sTUFBQUEsT0FBTyxFQUFFLE1BQU1DLE1BQU0sQ0FBQ0MsV0FBUCxDQUFtQixHQUFuQixFQUF3QkMsUUFBeEIsQ0FBaUMsS0FBakMsQ0FGSjtBQUdYUixNQUFBQSxNQUFNLEVBQUU7QUFIRztBQVh3QixHQUFwQixDQUFuQixDQURzQixDQW1CdEI7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBTVMsWUFBWSxHQUFHLElBQUloQixRQUFRLENBQUNHLE1BQWIsQ0FBb0I7QUFDdkNjLElBQUFBLGlCQUFpQixFQUFFO0FBQ2pCWixNQUFBQSxJQUFJLEVBQUVDO0FBRFcsS0FEb0I7QUFJdkNZLElBQUFBLHNCQUFzQixFQUFFO0FBQ3RCYixNQUFBQSxJQUFJLEVBQUVjO0FBRGdCLEtBSmU7QUFPdkNDLElBQUFBLElBQUksRUFBRTtBQUNKZixNQUFBQSxJQUFJLEVBQUVDLE1BREY7QUFFSkMsTUFBQUEsTUFBTSxFQUFFO0FBRkosS0FQaUM7QUFXdkNjLElBQUFBLGFBQWEsRUFBRTtBQUNiaEIsTUFBQUEsSUFBSSxFQUFFaUI7QUFETyxLQVh3QjtBQWN2Q0MsSUFBQUEsTUFBTSxFQUFDO0FBQ0xsQixNQUFBQSxJQUFJLEVBQUVjO0FBREQ7QUFkZ0MsR0FBcEIsQ0FBckI7QUFxQkEsUUFBTUssWUFBWSxHQUFHLElBQUl4QixRQUFRLENBQUNHLE1BQWIsQ0FBb0I7QUFDdkNzQixJQUFBQSxJQUFJLEVBQUU7QUFDSnBCLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDRyxNQUFULENBQWdCdUIsS0FBaEIsQ0FBc0JDLFFBRHhCO0FBRUpDLE1BQUFBLEdBQUcsRUFBRSxNQUZEO0FBR0pwQixNQUFBQSxRQUFRLEVBQUU7QUFITixLQURpQztBQU1yQ3FCLElBQUFBLE1BQU0sRUFBRTtBQUNKeEIsTUFBQUEsSUFBSSxFQUFFTCxRQUFRLENBQUNHLE1BQVQsQ0FBZ0J1QixLQUFoQixDQUFzQkMsUUFEeEI7QUFFSkMsTUFBQUEsR0FBRyxFQUFFLFFBRkQ7QUFHSnBCLE1BQUFBLFFBQVEsRUFBRTtBQUhOLEtBTjZCO0FBV3JDc0IsSUFBQUEsU0FBUyxFQUFFO0FBQ1R6QixNQUFBQSxJQUFJLEVBQUVpQjtBQURHLEtBWDBCO0FBY3JDUyxJQUFBQSxNQUFNLEVBQUU7QUFDTjFCLE1BQUFBLElBQUksRUFBRWlCO0FBREEsS0FkNkI7QUFpQnJDVSxJQUFBQSxPQUFPLEVBQUU7QUFDUDNCLE1BQUFBLElBQUksRUFBRWlCO0FBREMsS0FqQjRCO0FBb0JyQ1csSUFBQUEsY0FBYyxFQUFFO0FBQ2Q1QixNQUFBQSxJQUFJLEVBQUVpQjtBQURRLEtBcEJxQjtBQXVCckNZLElBQUFBLFdBQVcsRUFBRTtBQUNYN0IsTUFBQUEsSUFBSSxFQUFFQyxNQURLO0FBRVg2QixNQUFBQSxTQUFTLEVBQUU7QUFGQSxLQXZCd0I7QUEyQnJDQyxJQUFBQSxTQUFTLEVBQUU7QUFDUC9CLE1BQUFBLElBQUksRUFBRWdDLElBREM7QUFFUHpCLE1BQUFBLE9BQU8sRUFBRXlCLElBQUksQ0FBQ0M7QUFGUDtBQTNCMEIsR0FBcEIsQ0FBckI7QUFpQ0MsQ0F0RkQ7O0FBd0ZBLGVBQWVyQyxPQUFmIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9OYWRpYS9UZWNobmlnby9GaW5hbC1wcm9qZWN0L3NlcnZlci8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuXG5jb25zdCBTY2hlbWFzID0gKCkgPT4ge1xuY29uc3QgdXNlclNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICBlbWFpbDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICB1bmlxdWU6IHRydWUsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gIH0sXG4gIHBhc3N3b3JkOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIG1pbkxlbmd0aDogMixcbiAgfSxcbiAgYWNjZXNzVG9rZW46IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogKCkgPT4gY3J5cHRvLnJhbmRvbUJ5dGVzKDEyOCkudG9TdHJpbmcoJ2hleCcpLFxuICAgIHVuaXF1ZTogdHJ1ZSxcbiAgfSxcbn0pO1xuXG4vLyAvLyB1c2VyIHZhbGlkYXRpb25cbi8vIHVzZXJTY2hlbWEucHJlKCdzYXZlJywgYXN5bmMgZnVuY3Rpb24gKG5leHQpIHtcbi8vIFx0Y29uc3QgdXNlciA9IHRoaXM7XG5cbi8vIFx0aWYgKCF1c2VyLmlzTW9kaWZpZWQoJ3Bhc3N3b3JkJykpIHtcbi8vIFx0XHRyZXR1cm4gbmV4dCgpO1xuLy8gXHR9XG5cbi8vICAgY29uc3Qgc2FsdCA9IGJjcnlwdC5nZW5TYWx0U3luYygpO1xuLy8gXHR1c2VyLnBhc3N3b3JkID0gYmNyeXB0Lmhhc2hTeW5jKHVzZXIucGFzc3dvcmQsIHNhbHQpO1xuLy8gXHRuZXh0KCk7XG4vLyB9KTtcblxuY29uc3QgY2xpbmljU2NoZW1hID0gbmV3IG1vbmdvb3NlLlNjaGVtYSh7XG4gIGZvcm1hdHRlZF9hZGRyZXNzOiB7XG4gICAgdHlwZTogU3RyaW5nXG4gIH0sXG4gIGZvcm1hdHRlZF9waG9uZV9udW1iZXI6IHtcbiAgICB0eXBlOiBOdW1iZXJcbiAgfSxcbiAgbmFtZTogeyBcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdW5pcXVlOiB0cnVlXG4gIH0sXG4gIG9wZW5pbmdfaG91cnM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgfSxcbiAgcmF0aW5nOntcbiAgICB0eXBlOiBOdW1iZXJcbiAgfVxuICBcbn0pO1xuXG5cbmNvbnN0IHJldmlld1NjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuICB1c2VyOiB7XG4gICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgIHJlZjogJ1VzZXInLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gICAgY2xpbmljOiB7XG4gICAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnQ2xpbmljJyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHJlY2VwdGlvbjoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgfSxcbiAgICB0aW1lbHk6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgIH0sXG4gICAgaGVscGZ1bDoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgfSxcbiAgICByZWNvbW1lbmRhdGlvbjoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgfSxcbiAgICB0ZXN0aW1vbmlhbDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgbWF4TGVuZ3RoOiAyMDBcbiAgICB9LFxuICAgIGNyZWF0ZWRBdDoge1xuICAgICAgICB0eXBlOiBEYXRlLFxuICAgICAgICBkZWZhdWx0OiBEYXRlLm5vd1xuICAgIH1cbn0pO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjaGVtYXM7XG5cblxuXG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "schemas.js"
      ],
      "names": [
        "mongoose",
        "Schemas",
        "userSchema",
        "Schema",
        "email",
        "type",
        "String",
        "unique",
        "required",
        "password",
        "minLength",
        "accessToken",
        "default",
        "crypto",
        "randomBytes",
        "toString",
        "clinicSchema",
        "formatted_address",
        "formatted_phone_number",
        "Number",
        "name",
        "opening_hours",
        "Array",
        "rating",
        "reviewSchema",
        "user",
        "Types",
        "ObjectId",
        "ref",
        "clinic",
        "reception",
        "timely",
        "helpful",
        "recommendation",
        "testimonial",
        "maxLength",
        "createdAt",
        "Date",
        "now"
      ],
      "mappings": "AAAA,OAAOA,QAAP,MAAqB,UAArB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACtB,QAAMC,UAAU,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAAoB;AACrCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEC,MADD;AAELC,MAAAA,MAAM,EAAE,IAFH;AAGLC,MAAAA,QAAQ,EAAE;AAHL,KAD8B;AAMrCC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,IAAI,EAAEC,MADE;AAERE,MAAAA,QAAQ,EAAE,IAFF;AAGRE,MAAAA,SAAS,EAAE;AAHH,KAN2B;AAWrCC,IAAAA,WAAW,EAAE;AACXN,MAAAA,IAAI,EAAEC,MADK;AAEXM,MAAAA,OAAO,EAAE,MAAMC,MAAM,CAACC,WAAP,CAAmB,GAAnB,EAAwBC,QAAxB,CAAiC,KAAjC,CAFJ;AAGXR,MAAAA,MAAM,EAAE;AAHG;AAXwB,GAApB,CAAnB,CADsB,CAmBtB;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,QAAMS,YAAY,GAAG,IAAIhB,QAAQ,CAACG,MAAb,CAAoB;AACvCc,IAAAA,iBAAiB,EAAE;AACjBZ,MAAAA,IAAI,EAAEC;AADW,KADoB;AAIvCY,IAAAA,sBAAsB,EAAE;AACtBb,MAAAA,IAAI,EAAEc;AADgB,KAJe;AAOvCC,IAAAA,IAAI,EAAE;AACJf,MAAAA,IAAI,EAAEC,MADF;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAPiC;AAWvCc,IAAAA,aAAa,EAAE;AACbhB,MAAAA,IAAI,EAAEiB;AADO,KAXwB;AAcvCC,IAAAA,MAAM,EAAC;AACLlB,MAAAA,IAAI,EAAEc;AADD;AAdgC,GAApB,CAArB;AAqBA,QAAMK,YAAY,GAAG,IAAIxB,QAAQ,CAACG,MAAb,CAAoB;AACvCsB,IAAAA,IAAI,EAAE;AACJpB,MAAAA,IAAI,EAAEL,QAAQ,CAACG,MAAT,CAAgBuB,KAAhB,CAAsBC,QADxB;AAEJC,MAAAA,GAAG,EAAE,MAFD;AAGJpB,MAAAA,QAAQ,EAAE;AAHN,KADiC;AAMrCqB,IAAAA,MAAM,EAAE;AACJxB,MAAAA,IAAI,EAAEL,QAAQ,CAACG,MAAT,CAAgBuB,KAAhB,CAAsBC,QADxB;AAEJC,MAAAA,GAAG,EAAE,QAFD;AAGJpB,MAAAA,QAAQ,EAAE;AAHN,KAN6B;AAWrCsB,IAAAA,SAAS,EAAE;AACTzB,MAAAA,IAAI,EAAEiB;AADG,KAX0B;AAcrCS,IAAAA,MAAM,EAAE;AACN1B,MAAAA,IAAI,EAAEiB;AADA,KAd6B;AAiBrCU,IAAAA,OAAO,EAAE;AACP3B,MAAAA,IAAI,EAAEiB;AADC,KAjB4B;AAoBrCW,IAAAA,cAAc,EAAE;AACd5B,MAAAA,IAAI,EAAEiB;AADQ,KApBqB;AAuBrCY,IAAAA,WAAW,EAAE;AACX7B,MAAAA,IAAI,EAAEC,MADK;AAEX6B,MAAAA,SAAS,EAAE;AAFA,KAvBwB;AA2BrCC,IAAAA,SAAS,EAAE;AACP/B,MAAAA,IAAI,EAAEgC,IADC;AAEPzB,MAAAA,OAAO,EAAEyB,IAAI,CAACC;AAFP;AA3B0B,GAApB,CAArB;AAiCC,CAtFD;;AAwFA,eAAerC,OAAf",
      "sourceRoot": "/Users/Nadia/Technigo/Final-project/server/",
      "sourcesContent": [
        "import mongoose from 'mongoose';\n\nconst Schemas = () => {\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    unique: true,\n    required: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minLength: 2,\n  },\n  accessToken: {\n    type: String,\n    default: () => crypto.randomBytes(128).toString('hex'),\n    unique: true,\n  },\n});\n\n// // user validation\n// userSchema.pre('save', async function (next) {\n// \tconst user = this;\n\n// \tif (!user.isModified('password')) {\n// \t\treturn next();\n// \t}\n\n//   const salt = bcrypt.genSaltSync();\n// \tuser.password = bcrypt.hashSync(user.password, salt);\n// \tnext();\n// });\n\nconst clinicSchema = new mongoose.Schema({\n  formatted_address: {\n    type: String\n  },\n  formatted_phone_number: {\n    type: Number\n  },\n  name: { \n    type: String,\n    unique: true\n  },\n  opening_hours: {\n    type: Array,\n  },\n  rating:{\n    type: Number\n  }\n  \n});\n\n\nconst reviewSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n    clinic: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Clinic',\n        required: true\n    },\n    reception: {\n      type: Array,\n    },\n    timely: {\n      type: Array,\n    },\n    helpful: {\n      type: Array,\n    },\n    recommendation: {\n      type: Array,\n    },\n    testimonial: {\n      type: String,\n      maxLength: 200\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now\n    }\n});\n\n}\n\nexport default Schemas;\n\n\n\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1613226032666
  }
}